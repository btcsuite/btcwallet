// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: blocks.sql

package sqlc

import (
	"context"
)

const DeleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks
WHERE block_height = $1
`

func (q *Queries) DeleteBlock(ctx context.Context, blockHeight int64) error {
	_, err := q.db.ExecContext(ctx, DeleteBlock, blockHeight)
	return err
}

const GetBlockByHeight = `-- name: GetBlockByHeight :one
SELECT block_height, header_hash, timestamp
FROM blocks
WHERE block_height = $1
`

func (q *Queries) GetBlockByHeight(ctx context.Context, blockHeight int64) (Block, error) {
	row := q.db.QueryRowContext(ctx, GetBlockByHeight, blockHeight)
	var i Block
	err := row.Scan(&i.BlockHeight, &i.HeaderHash, &i.Timestamp)
	return i, err
}

const InsertBlock = `-- name: InsertBlock :exec
INSERT INTO blocks (block_height, header_hash, timestamp)
VALUES ($1, $2, $3)
`

type InsertBlockParams struct {
	BlockHeight int64
	HeaderHash  []byte
	Timestamp   int64
}

func (q *Queries) InsertBlock(ctx context.Context, arg InsertBlockParams) error {
	_, err := q.db.ExecContext(ctx, InsertBlock, arg.BlockHeight, arg.HeaderHash, arg.Timestamp)
	return err
}
